!pip install -q kaggle


from google.colab import files
files.upload()



!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json


!kaggle datasets download -d salader/dogs-vs-cats


import zipfile
zip_ref= zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()


import tensorflow
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense, Flatten
from keras.applications.vgg16 import VGG16


conv_base=VGG16 (weights='imagenet', include_top = False, input_shape=(150,150,3))



conv_base.trainable = True 
set_trainable = False
for layer in conv_base.layers: 
  if layer.name == 'block5_conv1': 
    set_trainable = True
  if set_trainable:
    layer.trainable = True
  else:
    layer.trainable = False
for layer in conv_base.layers: 
  print(layer.name, layer. trainable)



conv_base.summary()


model = Sequential() 
model.add(conv_base)
model.add(Flatten())
model.add(Dense (256, activation='relu')) 
model.add(Dense (1, activation='sigmoid'))


# generators
train_ds = keras.utils.image_dataset_from_directory( 
    directory = '/content/train', labels = 'inferred', 
    label_mode = 'int', batch_size=32, image_size=(150,150))
validation_ds = keras.utils.image_dataset_from_directory( 
    directory = '/content/test', labels='inferred',
    label_mode = 'int', batch_size=32, image_size=(150,150))



# Normalize
def process (image, label):
  image = tensorflow.cast (image/255., tensorflow.float32) 
  return image,label
train_ds = train_ds.map(process) 
validation_ds = validation_ds.map(process)
model.compile(
    optimizer=keras.optimizers. RMSprop (learning_rate=1e-5), 
    loss='binary_crossentropy', metrics=['accuracy'])
history = model. fit (train_ds, epochs=2, validation_data=validation_ds)



# Evaluate the model on the test data
loss, accuracy = model.evaluate(validation_ds)
print('Test accuracy:', accuracy)



import matplotlib.pyplot as plt
# Plot training & validation accuracy values 
plt.plot(history.history['accuracy']) 
plt.plot(history.history['val_accuracy']) 
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend (['Train', 'Validation'], loc='upper left') 
plt.show()



# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()
