! pip install -q kaggle

from google.colab import files 
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d salader/dogs-vs-cats

!unzip dogs-vs-cats.zip

import tensorflow as tf 
from tensorflow import keras 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, Input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import BatchNormalization

train_ds = keras.utils.image_dataset_from_directory( 
    directory '/content/train',
    labels 'inferred',
    label_mode = 'binary', # Changed to 'binary' 
    batch_size = 32,
    image_size = (256, 256)
)
test_ds = keras.utils.image_dataset_from_directory( 
    directory '/content/test',
    labels 'inferred',
    label_mode = 'binary', # Changed to 'binary' 
    batch_size = 32,
    image_size = (256, 256)
)

from tensorflow.keras.utils import to_categorical
def process(image, label):
  image = tf.cast(image/255. ,	tf.float32)
  label = to_categorical(label, num_classes=2) # One-hot encode the labels 
  return image, label
train_ds = train_ds.map(process) 
test_ds = test_ds.map(process)



model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides = 2, padding = 'valid'))
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding = 'valid')) 
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides = 2, padding = 'valid'))
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu', padding = 'valid')) 
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2), strides = 2, padding = 'valid'))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(2, activation='sigmoid'))
model.summary()


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
history = model.fit(train_ds, epochs=1, validation_data=test_ds)


# Plotting Graph accuracy
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'], label='train acc') 
plt.plot(history.history['val_accuracy'], label='test acc')
plt.legend()
plt.show()



# Plot Confusion Matrix
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report 
import numpy as np
# Extract true Labels from the test dataset
y_true = []
for images, labels in test_ds:
  y_true.extend(np.argmax(labels.numpy(), axis=1)) # Convert to class indices

Y_pred = model.predict(test_ds)
y_pred = np.argmax(Y_pred, axis=1) 
print('Confusion Matrix')
# Use y_true instead of test_ds.classes 
print(confusion_matrix(y_true, y_pred))

print('Classification Report')
target_names = ['Cats', 'Dogs']
print(classification_report(y_true, y_pred, target_names=target_names))



import cv2
def predict_image(image_path): 
  img = cv2.imread(image_path)
  img = cv2.resize(img, (256, 256)) 
  img = img / 255.0
  img = np.expand_dims(img, axis=0) 
  prediction = model.predict(img) 
  predicted_class = np.argmax(prediction) 
  if predicted_class == 0:
    print("The image is predicted as a cat.")
  else:
    print("The image is predicted as a dog.")
# Replace 'path/to/your/image.jpg' with the actual path to your image
predict_image('/content/dogs_vs_cats/test/cats/cat.10.jpg')



test_img = cv2.imread('/content/dogs_vs_cats/test/cats/cat.10030.jpg') 
plt.imshow(test_img)
plt.show()
test_img.shape
test_img = cv2.resize(test_img, (256, 256))
test_input = test_img.reshape((1, 256, 256, 3)) 
model.predict(test_input)



def preprocess_image (image_path):
  image = cv2.imread(image_path) # Load image
  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # Convert BGR to RGB 
  image = cv2.resize(image, (256, 256)) # Resize to match model input 
  image = image / 255.0 # Normalize pixel values
  image = np.expand_dims (image, axis=0) # Add batch dimension
  return image
def predict_image(image_path):
  image = preprocess_image(image_path)
  prediction = model.predict(image)[0][0] # Get prediction score
  label = "Cat" if prediction > 0.5 else "Dog"
  confidence = max(prediction, 1 - prediction) * 100 # Convert to percentage 
  print(f"Prediction: {label} (Confidence: {confidence:.2f}%)")
image_path = "/content/dogs_vs_cats/test/cats/cat.10030.jpg" # Replace with your i
predict_image (image_path)



