
import os
import shutil
import zipfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16
from tensorflow.keras.optimizers import RMSprop

# download dataset and upload it to jupyter.
# link to dataset https://www.kaggle.com/datasets/salader/dogs-vs-cats
# ✅ Step 2: Unzip the uploaded dataset (after uploading via Jupyter)
zip_path = "dogs-vs-cats.zip"  # Make sure this file is uploaded in the same folder as notebook
extract_path = "dogs_vs_cats"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Unzipping completed.")


# ✅ Step 3: Organize into train/validation directories

source_dir = extract_path
base_dir = 'dataset'
train_dir = os.path.join(base_dir, 'train')
val_dir = os.path.join(base_dir, 'validation')

# Create folders
for category in ['cats', 'dogs']:
    os.makedirs(os.path.join(train_dir, category), exist_ok=True)
    os.makedirs(os.path.join(val_dir, category), exist_ok=True)

# List all images
all_images = [f for f in os.listdir(source_dir) if f.endswith('.jpg')]
train_imgs, val_imgs = train_test_split(all_images, test_size=0.2, random_state=42)

# Move images to proper folders
for fname in train_imgs:
    label = 'cats' if 'cat' in fname else 'dogs'
    shutil.copy(os.path.join(source_dir, fname), os.path.join(train_dir, label, fname))

for fname in val_imgs:
    label = 'cats' if 'cat' in fname else 'dogs'
    shutil.copy(os.path.join(source_dir, fname), os.path.join(val_dir, label, fname))

print("Dataset organized successfully.")


# ✅ Step 4: Data Augmentation

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=20,
    class_mode='binary'
)

validation_generator = test_datagen.flow_from_directory(
    val_dir,
    target_size=(150, 150),
    batch_size=20,
    class_mode='binary'
)


# ✅ Step 5: Load Pre-trained VGG16 without top layers

conv_base = VGG16(weights='imagenet',
                  include_top=False,
                  input_shape=(150, 150, 3))

conv_base.trainable = False  # Freeze the convolutional base


# ✅ Step 6: Build the model

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(learning_rate=1e-4),
              metrics=['accuracy'])

model.summary()


# ✅ Step 7: Train the model

history = model.fit(
    train_generator,
    steps_per_epoch=100,
    epochs=10,
    validation_data=validation_generator,
    validation_steps=50
)


# ✅ Step 8: Plot accuracy and loss

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(acc))

plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(epochs, loss, 'ro', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()
